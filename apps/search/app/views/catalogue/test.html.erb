
<!DOCTYPE html>
<html>
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta name="apple-mobile-web-app-capable" content="yes">
        <title>Extended clustering example</title>
        <link rel="stylesheet" href="http://openlayers.org/dev/theme/default/style.css" type="text/css">
        <link rel="stylesheet" href="http://openlayers.org/dev/examples/style.css" type="text/css">
        <link href="/stylesheets/OpenLayers.css?1337292033" media="screen" rel="stylesheet" type="text/css" />        
        <style type="text/css">
            label {
                cursor: pointer
            }
            
            #wrap {
                width: 925px;
                margin: 10px;
            }
            
            #strategy-chooser, #generalinfo, #info {
                width: 400px;
                padding: 0;
                float: right;
                clear: right;
                margin-bottom: 4px;
            }
            
            #map {
                float: left;
            }
        </style>
        <script src="http://maps.google.com/maps/api/js?v=3.5&sensor=false"></script>
        <script src="/javascripts/OpenLayers.js?1334000054" type="text/javascript"></script>
        <script src="/javascripts/application.js" type="text/javascript"></script>        
    </head>
    <body>
        <h1 id="title">Extended clustering</h1>
        <div id="tags">
            cluster, advanced
        </div>
        <p id="shortdesc">
            Shows the usage of custom classes for a fine grained control about 
            the clustering behaviour.
        </p>
        <div id="wrap">
            <div id="map" class="smallmap">
            </div>
            <div id="strategy-chooser">
                <p>
                    Select the desired clustering strategy:
                </p>
                <label>
                    <input type="radio" name="strategy" value="none" id="no-strategy" checked="checked">No strategy
                </label>
                <br>
                <label>
                    <input type="radio" name="strategy" value="cluster" id="cluster-strategy">Simple cluster-strategy
                </label>
                <br>
                <label>
                    <input type="radio" name="strategy" value="attribute-cluster" id="attributive-cluster-strategy">Attributive cluster-strategy
                </label>
                <br>
                <label>
                    <input type="radio" name="strategy" value="rule-cluster" id="rulebased-cluster-strategy">Rulebased cluster-strategy
                </label>
            </div>
            <div id="generalinfo">
            </div>
            <div id="info">
            </div>
        </div>
        <div id="docs" style="clear: both; padding-top: 10px">
            <p>
                The vectorlayer in this example contains random data with an 
                attribute "clazz" that can take the values 1, 2, 3 and 4. The  
                features with clazz = 4 are considered more important than the 
                others.
            </p>
            <p>
                The radiobuttons on the right of the map control the 
                cluster strategy to be applied to the features.
            </p>
            <ul>
                <li>
                    <strong>No strategy</strong>
                    means that all features are 
                    rendered, no clustering shall be applied
                </li>
                <li>
                    <strong>Simple cluster-strategy</strong>
                    applies the cluster 
                    strategy with default options to the layer. You should notice 
                    that many of the important features with clazz = 4 are getting
                    lost, since clustering happens regardless of feature attributes
                </li>
                <li>
                    <strong>Attributive cluster-strategy</strong>
                    uses a 
                    customized cluster strategy. This strategy is configured to 
                    cluster features of the same clazz only. You should be able to see all 
                    red points (clazz = 4) even though the data is clustered. A 
                    cluster now contains only features of the same clazz.
                </li>
                <li>
                    <strong>Rulebased cluster-strategy</strong>
                    uses another 
                    customized cluster strategy. This strategy is configured to  
                    cluster features that follow a certain rule only. In this case only  
                    features with a clazz different from 4 are considered as 
                    candidates for clustering. That means that usually you have fewer 
                    clusters on the map, yet all with clazz = 4 are easily 
                    distinguishable
                </li>
            </ul>
            <p>
                Hover over the features to get a short infomation about the 
                feature or cluster of features. 
            </p>
        </div>
        <p>
            View the <a href="strategy-cluster-extended.js" target="_blank">strategy-cluster-extended.js</a>
            source to see how this is done.
        </p>
        <script type="text/javascript" src="/javascripts/OpenLayers.js?1334000054"></script>
        <script>


(function(){

  var map, vectorlayer, googleLayer, features, styleMap, select;
  
	var showInformation = function(evt){
    var feature = evt.feature;
		var info = '';
		var lonLat;
		if (feature.cluster.length === 1) {
		  info = feature.cluster[0].attributes.html;
		  lonLat = feature.cluster[0].geometry.bounds.centerLonLat;
		} else if (feature.cluster) {
  	  info = 'Cluster of ' + feature.attributes.count + ' datasets. Zoom in for more details';
  	  lonLat = feature.geometry.bounds.centerLonLat;
		}
    var popup = new OpenLayers.Popup.FramedCloud("featurePopup", lonLat, null, info, null, true, null);
    popup.feature = feature;
    map.addPopup(popup, true);
  };
	

	map = new OpenLayers.Map("map");
  
  googleLayer = new OpenLayers.Layer.Google("Google Physical", {type: G_PHYSICAL_MAP});
    
  var style = new OpenLayers.Style({
    pointRadius: "${radius}",
    fillColor: "${getFillColor}",
    fillOpacity: 0.8,
    strokeColor: "${getStrokeColor}",
    strokeWidth: 2,
    strokeOpacity: 0.8
  }, {
    context: {
      radius: function(feature) {
        return Math.min(feature.attributes.count, 7) + 6;
      }, 
      getFillColor: function(feature) {
        return feature.cluster.length > 1 ? "#ffcc66" : "#7CC9FF";
      },
      getStrokeColor: function(feature) {
        return feature.cluster.length > 1 ? "#cc6633" : "#000000";
      }
    }
  });

  styleMap = new OpenLayers.StyleMap({
    "default": style,
    "select": {
      fillColor: "#8aeeef",
      strokeColor: "#32a8a9"
    }
  })
    
  // the vectorlayer
  vectorlayer = new OpenLayers.Layer.Vector('Vectorlayer', {styleMap: styleMap, strategies: [
    new OpenLayers.Strategy.Cluster({ distance: 40 })    
  ]});
    
	// the select control
	select = new OpenLayers.Control.SelectFeature(vectorlayer);
  map.addControl(select);
  select.activate();
  vectorlayer.events.on({"featureselected": showInformation});

  map.addLayers([googleLayer, vectorlayer]);
  map.addControl(new OpenLayers.Control.LayerSwitcher());
  WEHub.OpenLayers.setCenter(map, -113.873291, 52.293992, 3);  
  
  features = [];
<%
  @search.results.each_with_index do |result, index| 
    if result && result.coordinates
      coords = result.coordinates.split(',') 
        if coords.length == 2 && (coords[0].scan(/ /).empty? || coords[1].scan(/ /).empty?)
%> 
  features.push(WEHub.OpenLayers.buildFeature(map, <%= "#{coords[1]}" -%>, <%= "#{coords[0]}" -%>, <%= "'#{escape_javascript(result.name)}. <a href=\"/catalogue/details/#{result.uuid}/#{u(scrub_for_seo(result.name))}\">More details</a>'".html_safe -%>));
<%
      end
    end
  end
%>    
  vectorlayer.addFeatures(features);

})();        
        </script>
    </body>
</html>

