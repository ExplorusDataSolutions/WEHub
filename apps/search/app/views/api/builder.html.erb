<% cache "api_builder" do %>
<%= render 'shared_styles' %>

<script>
  $('document').ready(function() {
    $('#feature_layer_filter').hide();
    
    var externalDatasets = [];
    $.ajax({
      url: "<%= url_for :controller => 'api', :action => 'external_datasets', :format => 'json' %>",
      global: false,
      success: function(data) { 
        externalDatasets = data; 
      }
    })
      
    function isExternalDataset(uuid) {
      for (var i=0 ; i < externalDatasets.length ; i++) {
        if (externalDatasets[i] === uuid) {
          $('[name=source]').val('external');
          return true;
        }
      }
      return false;
    }
    
    function externalLayerSelector(uuid) {
      $.ajax({
        url: "<%= url_for :controller => 'api', :action => 'external_layers', :format => 'html' %>" + "&id=" + uuid,
        success: function(data) {         

          var layers = []
          $.ajax({
            url: "<%= url_for :controller => 'api', :action => 'external_layers', :format => 'json' %>" + "&id=" + uuid,
            success: function(data) { 
            
              for (var i=0 ; i < data.length ; i++) {
                var layer = data[i];
                var boundingBox = layer.bounding_box;
                if (boundingBox) {
                  var bounds = new OpenLayers.Bounds();
                  bounds.extend(new OpenLayers.LonLat(boundingBox.east,boundingBox.north).transform(new OpenLayers.Projection('EPSG:4326'), map.getProjectionObject()));
                  bounds.extend(new OpenLayers.LonLat(boundingBox.west,boundingBox.south).transform(new OpenLayers.Projection('EPSG:4326'), map.getProjectionObject()));  
                  layers.push({bounds: bounds, colour: layer.colour.code});  
                }
              }
              
              var displayLayersOnBuilder = $('select[name=layer]');
              displayLayersOnBuilder.html('');
              for (var i=0 ; i < data.length ; i++) {
                var layer = data[i];
                
                var displayName = layer.name ? layer.name : layer.period;
                var option = $('<option></option>').attr('value',layer.layer_id).text(displayName);
                if (i === 0) {
                  option.attr('selected', 'selected');
                }
                displayLayersOnBuilder.append(option);
              }

              function drawLayer(layer) {
                var oldBoxes = map.getLayersByName('boxes');
                for (var i=0 ; i<oldBoxes.length ; i++) {
                  map.removeLayer(oldBoxes[i]);
                }
                
                var boxes = new OpenLayers.Layer.Boxes('boxes');
                var box = new OpenLayers.Marker.Box(layer.bounds);
                box.setBorder(layer.colour, 2);
                boxes.addMarker(box);

                map.addLayer(boxes);
                
                map.zoomToExtent(layer.bounds);
              }

              drawLayer(layers[0]);

              $('[name=layer]').unbind().change(function(event) {
                var index = $('[name=layer]').index(event.target);
                drawLayer(layers[index-1]);     
                $(displayLayersOnBuilder.find('option')[index]).attr('selected','selected');
              })

            }
          });
          
          WEHub.modal("Layer selector", data, { 
            width: 1090, 
            zIndex: 0,
            buttons: [{
              text: "Next",
              click: function() { 
                $(this).dialog("close"); 
                $('#feature_layer_filter .filter_layer_display').slideDown('fast');
                $('[name=filter_layer_start]').val($('[name=layer_start]').val());
                $('[name=filter_layer_end]').val($('[name=layer_end]').val());
                $('[name=layer]').selectmenu('destroy').selectmenu();                
              }
            }]
          });
          $('#layer-selector').find('[name=layer_start],[name=layer_end]').datepicker({ dateFormat: 'dd/mm/yy' });
          loadMapAndAssignBoundingBox('.layer-bounding-box', 'layer_');
        }
      });      
    }
    
    var secondaries = $('[name=datasets], [name=info_type], [name=output], [name=commit]');
    
    secondaries.change(function(event) {
      $('[name=source]').val('');
      $('#builder_response').hide('fast');
      if ($('[name=info_type]').val() !== 'feature') {
        $('#feature_type_filter').hide('fast');
        if (!isExternalDataset($('[name=datasets]').val())) {
          $('#feature_layer_filter').hide('fast');
        }
      }
    });
    
    $('[name=info_type], [name=datasets]').change(function(event) {
      var filterPanel = $('#feature_type_filter');
      var externalLayerPanel = $('#feature_layer_filter');
      var uuid = $('[name=datasets]').val();
      if ($('[name=info_type]').val() === 'feature') {
        if (!isExternalDataset(uuid)) {
          $.get("<%= url_for :controller => 'api', :action => 'feature_fields', :format => 'html' %>" + "&id=" + uuid, function(data) {
            $('[name=feature_fields]').html($(data).html());
            externalLayerPanel.hide('fast');
            filterPanel.slideDown('fast');
            $('[name=feature_fields]').selectmenu('destroy').selectmenu();            
          });
        } else {
          filterPanel.hide('fast'); 
          externalLayerSelector(uuid);
          externalLayerPanel.slideDown('fast');
        }
      } else {
        filterPanel.slideUp('fast');
        externalLayerPanel.slideUp('fast');
      }
    });
    
    $('#layer-selector-hook').click(function(event) {
      event.preventDefault();
      externalLayerSelector($('[name=datasets]').val());
    });
     
    $('[name=feature_type]').change(function(event) {
      $('#search_builder_response').hide('fast');
      $('#north, #east, #south, #west, #start, #end').val('');
      var featureTypeId = event.currentTarget.value;
      var url = "<%= url_for :controller => 'api', :action => 'datasets' %>" + "?feature_type_id=" + featureTypeId + "&format=html";
      
      $.get(url, function(data) { 
        $('[name=datasets]').html($(data).html()); 
      });
      
    });

    function cleanSerializedForm(data) {
      data = data.replace('query=<%= CGI::escape(constants.text.search) %>', '');
      data = data.replace('properties=<%= CGI::escape(constants.text.properties) %>', '');
      return data.replace(/&+/g,'&');
    }
    
    $('[name=search]').click(function(event) {
      event.preventDefault();
      
      $('[name=feature_type]').val(0)
      
      var formValues = cleanSerializedForm($('form').find('[name=query], [name=properties], [name=north], [name=east], [name=south], [name=east], [name=west], [name=start], [name=end]').filter(':input[value]').serialize());
      var url = "<%= url_for :controller => 'api', :action => 'datasets', :only_path => false %>" + "?" + "key=<%= current_user.api_key %>" + "&" + formValues + "&format=html";

      $.ajax({
        url: (url), 
        success: function(data) { 
          var response = $('#search_builder_response');
          response.find('a').attr('href', (url + "&format=xml")).text(url.replace('format=html', 'format=xml'))
          response.show('fast', function() { $(this).attr('tabindex', -1).focus(); });
          $('#second-step').show('fast');
          $('[name=info_type], [name=output]').selectmenu('destroy').val(0).trigger('change').selectmenu();
          $('[name=datasets]').html($(data).html());
          $('[name=datasets]').selectmenu('destroy').trigger('change').selectmenu({ width: 995 });
          response.effect("highlight", { color: '#FFFFFF' }, 6000);
          $('#second-step input:text').val('');

        },
        error: function() { 
          WEHub.modal("We're Sorry", "No data could be retrieved. Try making a new request."); 
          $('#second-step').hide('slow');          
        }
      });
    });
       
    $('[name=commit]').click(function(event) {
      event.preventDefault();
      $.ajax({
        url: "<%= url_for :controller => 'api', :action => 'builder_response' %>",
        data: cleanSerializedForm($('form').find('input, select').not('[name=utf8], [name=authenticity_token], :button, [type=submit]').filter(':input[value]').serialize()),
        success: function(data) { 
          $('#builder_response').html(data).show('fast', function() { $(this).attr('tabindex', -1).focus(); }).effect("highlight", { color: '#FFFFFF' }, 6000); 
        },
        error: function() { 
          WEHub.modal("We're Sorry", "No data could be retrieved. Try making a new request."); 
        },
        timeout: 300000
      });
    });
    
    $('#advanced_search_selector').find('[name=start],[name=end]').datepicker({ dateFormat: 'dd/mm/yy' });
    $('#feature_layer_filter').find('[name=filter_layer_start],[name=filter_layer_end]').datepicker({ dateFormat: 'dd/mm/yy' });    

    function loadMapAndAssignBoundingBox(boundingBoxParent, boundingBoxPrefix) {
      map = new OpenLayers.Map('map');
      
      var gphy = new OpenLayers.Layer.Google("Google Physical", {type: G_PHYSICAL_MAP});
      
      map.addLayers([gphy]);
      
      WEHub.OpenLayers.setCenter(map, -114.922485, 56.400224, 4);

      var boxControl = new OpenLayers.Control();
      OpenLayers.Util.extend(boxControl, {
        draw: function () {
          this.box = new OpenLayers.Handler.Box(boxControl, { "done": function(bounds) { 
            var leftBottom = map.getLonLatFromPixel(new OpenLayers.Pixel(bounds.left, bounds.bottom)).transform(map.getProjectionObject(), new OpenLayers.Projection('EPSG:4326'));
            var rightTop = map.getLonLatFromPixel(new OpenLayers.Pixel(bounds.right, bounds.top)).transform(map.getProjectionObject(), new OpenLayers.Projection('EPSG:4326'));;
            setBoundingBox(rightTop.lat, rightTop.lon, leftBottom.lat, leftBottom.lon);
          }});
        }
      });
      
      function buildPrefix(prefix, name) {
        return prefix ? prefix + name : name
      }
      function setBoundingBox(north, east, south, west) {
        var parent = $(boundingBoxParent);
        var prefix = boundingBoxPrefix;
        parent.find('[name=' + buildPrefix(prefix, 'north') + ']').val(north);
        parent.find('[name=' + buildPrefix(prefix, 'east') + ']').val(east);
        parent.find('[name=' + buildPrefix(prefix, 'south') + ']').val(south);
        parent.find('[name=' + buildPrefix(prefix, 'west') + ']').val(west);
      }   

      map.addControl(boxControl);
      boxControl.box.activate();
    }

    $('#bbox_selector').click(function(event) {
      event.preventDefault();
      WEHub.modal("Bounding box selector", 'Select a bounding box <div id="map" style="width:565px; height:320px"></div>');
      $("#dialog-modal").dialog('option', 'buttons', [{
        text: "Ok",
        click: function() { $(this).dialog("close"); }
      }]);
      loadMapAndAssignBoundingBox('#bbox-selector');
    });
    
    $('[name=search], [name=commit]').button();
  });
</script>

<p>
The WEHUB project offers an innovative aggregator service linked with a unified output service (an application programming interface, or API). This enables computer functions, or Apps, to be developed on top of the water data made available through this website. The WEHUB offers a typical data service for internally-uploaded information, while a translation engine is used to transmit external data in a unified format. This website supports a number of water-related web service standards, including WaterML and Sensor Observation Services.
</p>

<p>
The apps being built from the WEHUB range from quick-and-easy smartphone apps to more extensive applications that can be integrated into business processes.
</p>

<h2>The API Builder</h2>
<%= form_for :query_builder, :html => { :id => 'query_builder', :name => 'builder' } do |f| %>
  <%= hidden_field_tag 'source', false %>
  <div class="rounded">
    <div class="circle"><h3>1</h3></div>
    <div>Search</div>
    <table style="margin: 30px 0 0 30px;">
      <tr>
        <td class="option"><div class="circle option"><h3>A</h3></div></td>
        <td>By keywords / feature properties</td>
        <td></td>
        <td class="option"><div class="circle"><h3>B</h3></div></td>
        <td>By date range / bounding box</td>
      </tr>
      <tr>
        <td></td>
        <td class="rounded emphasized" style="width: 368px;">
          <table>
            <tr>
              <td style="width: 125px;"><%= label_tag :keywords, "Enter keywords" %></td>
              <td><%= f.text_field :keywords, :name => 'query', :size => '23'  %></td>
            </tr>
            <tr>
              <td><%= label_tag :properties, "Enter properties" %></td>
              <td><%= f.text_field :properties, :name => 'properties', :size => '23' %></td>
            </tr>
            <tr>
              <td style="padding: 20px 0 0 0;"></td>
              <td><%= submit_tag 'Search', :name => 'search', :style => 'float: right;' %></td>
            </tr>
          </table>
        </td>
        <td style="padding: 0 0 0 55px;"><h3>- or -</h3></td>
        <td></td>
        <td class="rounded emphasized">
    <div id="advanced_search_selector">
      <div id="bbox-selector">Select a bounding box
        <table>
          <tr><td></td><td><%= text_field_tag :north %></td><td></td></tr>
          <tr><td style="padding-left: 97px"><%= text_field_tag :west %></td><td></td><td><%= text_field_tag :east %></td></tr>
          <tr><td></td><td><%= text_field_tag :south %></td><td></td></tr>
          <tr><td colspan="4"><a href="#" id="bbox_selector">Click here</a> to open our bounding box selector.</td></tr>
          <tr><td colspan="4"><div id="date-range"><%= label_tag :start, "Select a date range" %> <%= text_field_tag :start %> - <%= text_field_tag :end %></div></td></tr>
          <tr><td colspan="4" style="align: right">      <%= submit_tag 'Search', :name => 'search', :style => 'float: right;' %></td></tr>
        </table>
      </div>
    </div>        
        </td>
      </tr>
    </table>
  </div>
  <div id="second-step" style="display: none;">
    <div id="search_builder_response" style="display: none;">
      <%= render 'builder_response' %>
    </div>
    <div class="rounded">
      <div class="circle"><h3>2</h3></div>
      <div>
      <%= label_tag 'datasets', 'Select from the search results' %>
      <%= select_tag 'datasets', nil, { :include_blank => true } %>
      </div>
    </div>
    <div class="rounded" id="dataset_common_terms">
      <strong>Shared terms</strong>
      <div>This dataset shares common terms with other datasets. <%= link_to 'View', :controller => 'api', :action => 'shared-terms', :target => 'shared-terms' %> shared terms.</div>
    </div>    
    <div class="rounded">
      <div class="circle"><h3>3</h3></div>
      <%= label_tag 'info_type', 'Select the type of information you would like to request' %>
      <%= select_tag 'info_type', options_for_select([ ['Dataset Information', 'dataset'], ['Feature Data', 'feature'] ]) %>
      <div id="feature_type_filter" style="display: none;">
        Select an optional feature property to filter your results <%= select_tag 'feature_fields', nil, { :include_blank => true } %>
      </div>
      <div id="feature_layer_filter" style="margin: 10px 0px 10px 50px; display: none;" class="rounded emphasized">
        <div class="filter_layer_display" style="display: none;">
          Selected layer: <%= select_tag 'layer' , options_for_select([]), { :include_blank => true } %>
          <div>
          Selected bounding box: 
          <table class="layer-bounding-box" >
            <tr><td></td><td><%= text_field_tag "layer_north"  %></td><td></td></tr>
            <tr><td style="padding-left: 97px"><%= text_field_tag "layer_west" %></td><td></td><td><%= text_field_tag "layer_east" %></td></tr>
            <tr><td></td><td><%= text_field_tag "layer_south" %></td><td></td></tr>
          </table>
          </div>
          <div id="date-range"><%= label_tag :filter_layer_start, "Selected date range" %> <%= text_field_tag :filter_layer_start %> - <%= text_field_tag :filter_layer_end %></div>
        </div>
        <a href="#" id="layer-selector-hook">Click here</a> to open our layer, bounding box, and date range selector.
      </div>
    </div>
    <div class="rounded">
      <div class="circle"><h3>4</h3></div>
      <%= label_tag 'output', 'Select a format' %>    
      <%= select_tag 'output', options_for_select([['JSON', 'json'], ['XML', 'xml']]) %>
    </div>
    <div class="rounded">
      <div class="circle"><h3>5</h3></div>
      <%= submit_tag 'Build the API call' %>
    </div>
  </div>
  
  <div id="builder_response" style="display: none;">
    <%= render 'builder_response' %>
  </div>
<% end %>

<% end %>
